@page "/credits"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<br />
<br />
<h2>Credits</h2>
<br />

@if (credits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>AccountOrCardCodeToDebt</th>
                <th>StartingCapital</th>
                <th>DebtCapital</th>
                <th>Installment</th>
                <th>PayDay</th>
                <th>TAN</th>
                <th>OpenDate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var credit in credits)
            {
                <tr>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.Code" class="form-control" />
                        }
                        else
                        {
                            @credit.Code
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.Description" class="form-control" />
                        }
                        else
                        {
                            @credit.Description
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.AccountOrCardCodeToDebt" class="form-control" />
                        }
                        else
                        {
                            @credit.AccountOrCardCodeToDebt
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.StartingCapital" class="form-control" />
                        }
                        else
                        {
                            @credit.StartingCapital
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.DebtCapital" class="form-control" />
                        }
                        else
                        {
                            @credit.DebtCapital
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.Installment" class="form-control" />
                        }
                        else
                        {
                            @credit.Installment
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.PayDay" class="form-control" />
                        }
                        else
                        {
                            @credit.PayDay
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.TAN" class="form-control" />
                        }
                        else
                        {
                            @credit.TAN
                        }
                    </td>
                    <td>
                        @if (credit.IsEditing)
                        {
                            <input @bind="credit.OpenDate" class="form-control" />
                        }
                        else
                        {
                            @credit.OpenDate.ToString("dd-MM-yyyy")
                        }
                    </td>                  
                </tr>
            }
        </tbody>
    </table>
    @* <button class="btn btn-primary" @onclick="AddNewCredit">Add</button> *@
}



@code {
    private List<CreditDto> credits;


    protected override async Task OnInitializedAsync()
    {
        credits = await Http.GetFromJsonAsync<List<CreditDto>>("Credits");
    }

    void AddNewCredit()
    {
        var newCredit = new CreditDto();
        credits.Add(newCredit);

        Edit(newCredit);

        StateHasChanged();
    }

    void Edit(CreditDto newCredit)
    {
        newCredit.IsEditing = true;
    }

    async Task Save(CreditDto creditDto)
    {
        if (creditDto.Id == 0)
        {
            // CreateCreditCardDto createCreditCardDto = new CreateCreditCardDto();

            // createCreditCardDto.Id = creditCardDto.Id;
            // createCreditCardDto.UserId = 1; //TODO @VS - Change user id to current user
            // createCreditCardDto.Code = creditCardDto.Code;
            // createCreditCardDto.Description = creditCardDto.Description;
            // createCreditCardDto.IBAN = creditCardDto.IBAN;
            // createCreditCardDto.NIB = creditCardDto.NIB;
            // createCreditCardDto.Balance = creditCardDto.Balance;
            // createCreditCardDto.Plafon = creditCardDto.Plafon;
            // createCreditCardDto.PercentageOfPayment = creditCardDto.PercentageOfPayment;
            // createCreditCardDto.EntityNumber = creditCardDto.EntityNumber;
            // createCreditCardDto.RefNumber = creditCardDto.RefNumber;
            // createCreditCardDto.CloseExtractDay = creditCardDto.CloseExtractDay;
            // createCreditCardDto.OpenDate = creditCardDto.OpenDate;
            // createCreditCardDto.CloseDate = creditCardDto.CloseDate;

            // var response = await Http.PostAsJsonAsync("creditCards", createCreditCardDto);
            // creditCardDto.IsEditing = false;
            // StateHasChanged();
        }
        else
        {
            // UpdateCreditCardDto updateCreditCardDto = new UpdateCreditCardDto();

            // updateCreditCardDto.Code = creditCardDto.Code;
            // updateCreditCardDto.UserId = 1; //TODO @VS - Change user id to current user
            // updateCreditCardDto.Description = creditCardDto.Description;
            // updateCreditCardDto.IBAN = creditCardDto.IBAN;
            // updateCreditCardDto.NIB = creditCardDto.NIB;
            // updateCreditCardDto.Balance = creditCardDto.Balance;
            // updateCreditCardDto.Plafon = creditCardDto.Plafon;
            // updateCreditCardDto.PercentageOfPayment = creditCardDto.PercentageOfPayment;
            // updateCreditCardDto.EntityNumber = creditCardDto.EntityNumber;
            // updateCreditCardDto.RefNumber = creditCardDto.RefNumber;
            // updateCreditCardDto.CloseExtractDay = creditCardDto.CloseExtractDay;
            // updateCreditCardDto.OpenDate = creditCardDto.OpenDate;
            // updateCreditCardDto.CloseDate = creditCardDto.CloseDate;

            // var response = await Http.PutAsJsonAsync("CreditCards/" + creditCardDto.Id, updateCreditCardDto);
            // creditCardDto.IsEditing = false;
            // StateHasChanged();
        }
    }

    async Task Cancel(CreditDto creditDto)
    {
        creditDto.IsEditing = false;
        credits = await Http.GetFromJsonAsync<List<CreditDto>>("Credits");
        StateHasChanged();
    }


    async Task ConfirmDelete(int creditId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this credit?" });

        if (confirmed)
        {
            await Delete(creditId);
        }
    }

    async Task Delete(int creditId)
    {
        var response = await Http.DeleteAsync("Credits/" + creditId);
        StateHasChanged();
        credits = await Http.GetFromJsonAsync<List<CreditDto>>("Credits");
    }

}