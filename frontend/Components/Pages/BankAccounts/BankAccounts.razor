@page "/bankaccounts"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<br />
<br />
<h2>Bank accounts</h2>
<br />

@if (bankAccounts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Number</th>
                <th>Swift</th>
                <th>Code</th>
                <th>Description</th>
                <th>IBAN</th>
                <th>NIB</th>
                <th>Balance</th>
                <th>OpenDate</th>
                <th>CloseDate</th>
                <th>Attachment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bankAccount in bankAccounts)
            {
                <tr>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.Number" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.Number
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.Swift" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.Swift
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.Code" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.Code
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.Description" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.Description
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.IBAN" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.IBAN
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.NIB" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.NIB
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.Balance" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.Balance
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.OpenDate" class="form-control" />
                        }
                        else
                        {
                            @bankAccount.OpenDate
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <input @bind="bankAccount.CloseDate" class="form-control" />
                        }
                        else
                        {
                            if (@bankAccount.CloseDate.HasValue)
                                @bankAccount.CloseDate!.Value.ToString("dd-MM-yyyy")
                            else
                                @bankAccount.CloseDate
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <InputFile OnChange="(e) => HandleFileUpload(e, bankAccount)" class="form-control" />
                        }
                        else if (bankAccount.Attachment != null)
                        {
                            <a href="@DownloadAttachment(bankAccount)" download="Attachment.pdf">Download file</a>
                        }
                    </td>
                    <td>
                        @if (bankAccount.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => Save(bankAccount)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => Cancel(bankAccount)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => Edit(bankAccount)">Editar</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(bankAccount.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="AddBankAccount">Add</button>
}



@code {
    private List<BankAccountDto> bankAccounts;
    private IBrowserFile file;


    protected override async Task OnInitializedAsync()
    {
        bankAccounts = await Http.GetFromJsonAsync<List<BankAccountDto>>("BankAccounts");
    }

    string DownloadAttachment(BankAccountDto bankAccount)
    {
        var dataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(bankAccount.Attachment)}";
        return dataUrl;
    }

    void HandleFileUpload(InputFileChangeEventArgs e, BankAccountDto bankAccountDto)
    {
        file = e.File;
        if (file != null)
        {
            // Process the uploaded file here, using the account parameter if needed
            // You can save it to the server or use it for download
        }
    }

    void AddBankAccount()
    {
        var newBankAccount = new BankAccountDto();
        bankAccounts.Add(newBankAccount);

        Edit(newBankAccount);

        StateHasChanged();
    }

    void Edit(BankAccountDto newBankAccount)
    {
        newBankAccount.IsEditing = true;
    }

    async Task Save(BankAccountDto bankAccountDto)
    {
        if (bankAccountDto.Id == 0)
        {
            // CreateCreditCardDto createCreditCardDto = new CreateCreditCardDto();

            // createCreditCardDto.Id = creditCardDto.Id;
            // createCreditCardDto.UserId = 1; //TODO @VS - Change user id to current user
            // createCreditCardDto.Code = creditCardDto.Code;
            // createCreditCardDto.Description = creditCardDto.Description;
            // createCreditCardDto.IBAN = creditCardDto.IBAN;
            // createCreditCardDto.NIB = creditCardDto.NIB;
            // createCreditCardDto.Balance = creditCardDto.Balance;
            // createCreditCardDto.Plafon = creditCardDto.Plafon;
            // createCreditCardDto.PercentageOfPayment = creditCardDto.PercentageOfPayment;
            // createCreditCardDto.EntityNumber = creditCardDto.EntityNumber;
            // createCreditCardDto.RefNumber = creditCardDto.RefNumber;
            // createCreditCardDto.CloseExtractDay = creditCardDto.CloseExtractDay;
            // createCreditCardDto.OpenDate = creditCardDto.OpenDate;
            // createCreditCardDto.CloseDate = creditCardDto.CloseDate;

            // var response = await Http.PostAsJsonAsync("creditCards", createCreditCardDto);
            // creditCardDto.IsEditing = false;
            // StateHasChanged();
        }
        else
        {
            // UpdateCreditCardDto updateCreditCardDto = new UpdateCreditCardDto();

            // updateCreditCardDto.Code = creditCardDto.Code;
            // updateCreditCardDto.UserId = 1; //TODO @VS - Change user id to current user
            // updateCreditCardDto.Description = creditCardDto.Description;
            // updateCreditCardDto.IBAN = creditCardDto.IBAN;
            // updateCreditCardDto.NIB = creditCardDto.NIB;
            // updateCreditCardDto.Balance = creditCardDto.Balance;
            // updateCreditCardDto.Plafon = creditCardDto.Plafon;
            // updateCreditCardDto.PercentageOfPayment = creditCardDto.PercentageOfPayment;
            // updateCreditCardDto.EntityNumber = creditCardDto.EntityNumber;
            // updateCreditCardDto.RefNumber = creditCardDto.RefNumber;
            // updateCreditCardDto.CloseExtractDay = creditCardDto.CloseExtractDay;
            // updateCreditCardDto.OpenDate = creditCardDto.OpenDate;
            // updateCreditCardDto.CloseDate = creditCardDto.CloseDate;

            // var response = await Http.PutAsJsonAsync("CreditCards/" + creditCardDto.Id, updateCreditCardDto);
            // creditCardDto.IsEditing = false;
            // StateHasChanged();
        }
    }

    async Task Cancel(BankAccountDto bankAccountDto)
    {
        bankAccountDto.IsEditing = false;
        bankAccounts = await Http.GetFromJsonAsync<List<BankAccountDto>>("BankAccounts");
        StateHasChanged();
    }


    async Task ConfirmDelete(int bankAccountId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this bank account?" });

        if (confirmed)
        {
            await Delete(bankAccountId);
        }
    }

    async Task Delete(int bankAccountId)
    {
        var response = await Http.DeleteAsync("BankAccounts/" + bankAccountId);
        StateHasChanged();
        bankAccounts = await Http.GetFromJsonAsync<List<BankAccountDto>>("BankAccounts");
    }

}